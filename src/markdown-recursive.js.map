{"version":3,"sources":["markdown-recursive.es6"],"names":[],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;;;;AAKA,IAAM,eAAe,SAAf,YAAe,CAAC,KAAD,EAAQ,MAAR,EAAmB;AACtC,MAAI,cAAc,QAAQ,OAAR,EAAlB;;AAEA,QAAM,OAAN,CAAc,gBAAQ;AACpB,QAAM,UAAU,eAAK,OAAL,CAAa,IAAb,CAAhB;;AAEA;AACA,QAAI,UAAU,eAAK,OAAL,CAAa,eAAK,IAAL,CAAU,IAAV,EAAgB,MAAhB,EAAwB,IAAxB,CAAb,CAAd;AACA,cAAa,QAAQ,KAAR,CAAc,CAAd,EAAiB,CAAC,CAAlB,CAAb;;AAEA,QAAM,aAAa,eAAK,OAAL,CAAa,OAAb,CAAnB;;AAEA,kBAAc,YAAY,IAAZ,CAAiB;AAAA,aAAM,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV;AAAA;AAC/C;AACA,uBAAG,QAAH,CAAY,OAAZ,EAAqB,MAArB,EAA6B,UAAC,GAAD,EAAM,QAAN;AAAA,mBAC1B,MAAM,OAAO,GAAP,CAAN,GAAoB,QAAQ,QAAR,CADM;AAAA,WAA7B;AAF+C;AAAA,OAAZ,CAAN;AAAA,KAAjB,EAKX,IALW,CAKN;AAAA,aAAY,IAAI,OAAJ,CAAY,UAAC,GAAD,EAAM,GAAN;AAAA,eAC9B,sBAAO,UAAP,EAAmB;AAAA,iBAChB,MAAM,IAAI,GAAJ,CAAN,GAAiB,IAAI,QAAJ,CADD;AAAA,SAAnB,CAD8B;AAAA,OAAZ,CAAZ;AAAA,KALM,EASX,IATW,CASN;AAAA,aAAY,IAAI,OAAJ,CAAY,UAAC,GAAD,EAAM,GAAN;AAAA,eAC9B,aAAG,SAAH,CACE,OADF,EAEE,sBAAO,QAAP,CAFF,EAGE;AAAA,iBAAQ,MAAM,IAAI,GAAJ,CAAN,GAAiB,KAAzB;AAAA,SAHF,CAD8B;AAAA,OAAZ,CAAZ;AAAA,KATM,CAAd;AAgBD,GAzBD;AA0BA,SAAO,WAAP;AACD,CA9BD;;AAgCA;;;;;AAKA,IAAM,kBAAkB,SAAlB,eAAkB;AAAA;AAAA;AAAA,MAEpB,KAFoB,0BAEZ,0BAFY;AAAA;AAAA,MAGpB,MAHoB,2BAGX,aAHW;;AAAA,2BAMpB,MANoB;AAAA,MAMpB,MANoB,gCAMX,QAAQ,GANG;AAAA,SAQnB,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACpC,WAAO,oBAAK,KAAL,EAAY,UAAC,GAAD,EAAM,KAAN;AAAA,aAChB,MAAM,OAAO,GAAP,CAAN,GAAoB,QAAQ,KAAR,CADJ;AAAA,KAAZ,CAAP;AAGD,GAJI,EAIF,IAJE,CAIG;AAAA,WAAS,IAAI,OAAJ,CAAY,UAAC,GAAD,EAAM,GAAN;AAAA,aACzB,sBAAO,MAAP,EAAe;AAAA,eACZ,MAAM,IAAI,GAAJ,CAAN,GAAiB,IAAI,KAAJ,CADL;AAAA,OAAf,CADyB;AAAA,KAAZ,CAAT;AAAA,GAJH,EAQF,IARE,CAQG;AAAA,WAAS,aAAa,KAAb,EAAoB,MAApB,CAAT;AAAA,GARH,EASH,KATG,CASG;AAAA,WAAO,OAAO,GAAP,CAAP;AAAA,GATH,CARmB;AAAA,CAAxB;;kBAmBe;AAAA,SAAa,gBAAgB,KAAhB,YAA4B,CAAC,sDAAW,EAAZ,EAAgB,sDAAW,EAA3B,CAA5B,CAAb;AAAA,C","file":"markdown-recursive.js","sourcesContent":["import marked from 'marked';\nimport fs from 'fs';\nimport path from 'path';\nimport glob from 'glob';\nimport mkdirp from 'mkdirp';\n\n/*\n * processFiles\n * @param {array} files\n * @param {string} outoput\n */\nconst processFiles = (files, output) => {\n  let returnChain = Promise.resolve();\n\n  files.forEach(file => {\n    const curPath = path.resolve(file);\n\n    // `path.resolve` method resolves a sequence of path into an **absolute** path\n    let newPath = path.resolve(path.join('./', output, file));\n    newPath = `${newPath.slice(0, -2)}html`;\n\n    const newDirPath = path.dirname(newPath);\n\n    returnChain = returnChain.then(() => new Promise((resolve, reject) =>\n      //read in target file contents\n      fs.readFile(curPath, 'utf8', (err, contents) =>\n        (err ? reject(err) : resolve(contents))\n      )\n    )).then(contents => new Promise((res, rej) =>\n      mkdirp(newDirPath, err =>\n        (err ? rej(err) : res(contents))\n      )\n    )).then(contents => new Promise((res, rej) =>\n      fs.writeFile(\n        newPath,\n        marked(contents),\n        err => (err ? rej(err) : res())\n      )\n    ));\n  });\n  return returnChain;\n};\n\n/*\n * markedDirectroy\n * @param {array} info\n * @param {object} option\n */\nconst markedDirectory = (\n  [\n    input = '{./docs/**/*.md, ./*.md}',\n    output = './docsBuild',\n  ],\n  {\n    logger = console.log,\n  }\n) => new Promise((resolve, reject) => {\n  return glob(input, (err, files) =>\n    (err ? reject(err) : resolve(files))\n  );\n}).then(files => new Promise((res, rej) =>\n    mkdirp(output, err =>\n      (err ? rej(err) : res(files))\n    )\n)).then(files => processFiles(files, output)\n).catch(err => logger(err));\n\nexport default (...args) => markedDirectory.apply(this, [args[0] || [], args[1] || {}]);\n\n"]}