{"version":3,"sources":["test.spec.es6"],"names":[],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAGA,SAAS,MAAT,EAAiB,YAAM;AACrB,KAAG,aAAH,EAAkB,YAAM;AACtB,QAAI,UAAU,IAAd;AACA,QAAM,SAAS,SAAT,MAAS,CAAC,GAAD,EAAS;AAAE,gBAAU,GAAV;AAAe,KAAzC;;AAEA,WAAO,iCAAG,CAAC,wBAAuB,CAAxB,CAAH,EAA+B,EAAC,cAAD,EAA/B,EACJ,IADI,CACC,YAAM;AACV,cAAQ,GAAR,eAAwB,OAAxB;AACA,4BAAO,OAAP,EAAgB,OAAhB,CAAwB,IAAI,SAAJ,CAAc,+CAAd,CAAxB;AACD,KAJI,CAAP;AAKD,GATD;AAUD,CAXD;;AAaA,SAAS,wBAAT,EAAmC,YAAM;AACvC,YAAU;AAAA,WACR,sBAAO,kBAAP,EAA2B,eAAO;AAChC,UAAI,GAAJ,EAAS;AACP,cAAM,GAAN;AACD;AACD;AACD,KALD,CADQ;AAAA,GAAV;;AASA,KAAG,wDAAH,EAA6D,YAAM;AACjE,WAAO,iCAAG,CAAC,qBAAD,EAAwB,kBAAxB,CAAH,EACJ,IADI,CACC;AAAA,aAAM,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AAC3C;AACA,4BAAK,4BAAL,EAAmC,UAAC,GAAD,EAAM,KAAN;AAAA,iBAChC,MAAM,OAAO,GAAP,CAAN,GAAoB,QAAQ,KAAR,CADY;AAAA,SAAnC;AAGD,OALW,CAAN;AAAA,KADD,EAOJ,IAPI,CAOC,iBAAS;AACf;AACE,4BAAO,KAAP,EAAc,SAAd,CAAwB,wCAAxB;AACD,KAVI,EAWJ,KAXI,CAWE;AAAA,aAAO,QAAQ,GAAR,wBAAiC,GAAjC,OAAP;AAAA,KAXF,CAAP;AAYD,GAbD;AAcD,CAxBD","file":"test.spec.js","sourcesContent":["import expect from 'expect';\nimport md from '../src/markdown-recursive';\nimport glob from 'glob';\nimport rimraf from 'rimraf';\n\n\ndescribe('test', () => {\n  it('should fail', () => {\n    let lastMsg = null;\n    const logger = (msg) => { lastMsg = msg;};\n\n    return md(['./test/docs/**/*.md' -1], {logger})\n      .then(() => {\n        console.log(`lasgMsg: ${lastMsg}`);\n        expect(lastMsg).toEqual(new TypeError('TypeError: Path must be a string. Received -1'));\n      });\n  });\n});\n\ndescribe('Given ./docs/sample.md', () => {\n  afterEach(done =>\n    rimraf('./test/testBuild', err => {\n      if (err) {\n        throw err;\n      }\n      done();\n    })\n  );\n\n  it('should make a directry for .hmtl files and sample.html', () => {\n    return md(['./test/docs/**/*.md', './test/testBuild'])\n      .then(() => new Promise((resolve, reject) => {\n        // check if html files and directories exist\n        glob('./test/testBuild/**/*.html', (err, files) =>\n          (err ? reject(err) : resolve(files))\n        )\n      }))\n      .then(files => {\n      //  files include thefile(./test/testBuild/test/docs/sample.html)\n        expect(files).toInclude('./test/testBuild/test/docs/sample.html');\n      })\n      .catch(err => console.log(`error is occured: ${err}!`))\n  });\n});\n\n"]}